{"ast":null,"code":"var _jsxFileName = \"/Users/wailwinphyo/root/projects/React/waveMusic/src/Player.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faPause, faAngleLeft, faAngleRight } from \"@fortawesome/free-solid-svg-icons\"; // import {playAudio} from './util'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Player({\n  currentSong,\n  isPlaying,\n  setIsPlaying,\n  setAudio,\n  audio,\n  songs,\n  setSongs,\n  setCurrentSong\n}) {\n  _s();\n\n  //Ref\n  const audioRef = useRef(null);\n  var fuck = currentSong; //useEffect\n\n  useEffect(() => {\n    //Change Active\n    const newSongs = songs.map(songCheck => {\n      if (songCheck.id === currentSong.id) {\n        return { ...songCheck,\n          active: true\n        }; //! I think that spreaded object and modify new value\n      } else {\n        return { ...songCheck,\n          active: false\n        };\n      }\n    }); //? Notice map return a new Array\n\n    setSongs(newSongs);\n  }, [fuck]); //Events Handler\n\n  const songEndHandler = async () => {\n    const songIndex = songs.findIndex(song => song.id === currentSong.id);\n    await setCurrentSong(songs[(songIndex + 1) % songs.length]);\n    if (isPlaying) audioRef.current.play();\n  };\n\n  const skipTrackHandler = async direction => {\n    const songIndex = songs.findIndex(song => song.id === currentSong.id);\n\n    if (direction === \"skip-forward\") {\n      await setCurrentSong(songs[(songIndex + 1) % songs.length]);\n    }\n\n    if (direction === \"skip-back\") {\n      if (songIndex === 0) {\n        await setCurrentSong(songs[songs.length - 1]); // playAudio(isPlaying, audio); //* this for because of returning, won't work continue function\n\n        if (isPlaying) audioRef.current.play();\n        return;\n      }\n\n      await setCurrentSong(songs[songIndex - 1]);\n    } // playAudio(isPlaying, audio);\n\n\n    if (isPlaying) audioRef.current.play();\n  };\n\n  const playSongHandler = async () => {\n    await setAudio(audioRef);\n\n    if (isPlaying) {\n      await audioRef.current.pause();\n      await setIsPlaying(!isPlaying);\n    } else {\n      await audioRef.current.play();\n      await setIsPlaying(!isPlaying);\n    }\n  };\n\n  const timeUpdateHandler = async e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const animtaion = Math.round(roundedCurrent / roundedDuration * 100);\n    await setSongInfo({\n      currentTime: current,\n      duration: duration,\n      animationPercentage: animtaion\n    });\n  };\n\n  const getTime = time => {\n    return Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2);\n  };\n\n  const dragInputHandler = e => {\n    audioRef.current.currentTime = e.target.value;\n    setSongInfo({ ...songInfo,\n      currentTime: e.target.value\n    });\n  }; //Song Info\n\n\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0\n  });\n  const track = {\n    transform: `translateX(${songInfo.animationPercentage}%)`\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: getTime(songInfo.currentTime)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"track\",\n        style: {\n          background: `linear-gradient(to right, ${currentSong.color[0]}, ${currentSong.color[1]})`\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          min: 0,\n          max: songInfo.duration || 0,\n          value: songInfo.currentTime,\n          type: \"range\",\n          onChange: dragInputHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"animate-track\",\n          style: track\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: songInfo.duration ? getTime(songInfo.duration) : \"0:00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play-control\",\n      children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        className: \"skip-back\",\n        icon: faAngleLeft,\n        size: \"2x\",\n        onClick: () => skipTrackHandler(\"skip-back\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        className: \"play\",\n        icon: isPlaying ? faPause : faPlay,\n        size: \"2x\",\n        onClick: playSongHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        className: \"skip-forward\",\n        icon: faAngleRight,\n        size: \"2x\",\n        onClick: () => skipTrackHandler(\"skip-forward\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      src: currentSong.audio,\n      onTimeUpdate: timeUpdateHandler,\n      onLoadedMetadata: timeUpdateHandler,\n      onEnded: songEndHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Player, \"chwXIP/a09sd+IrxgLo8aV1SPR0=\");\n\n_c = Player;\nexport default Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["/Users/wailwinphyo/root/projects/React/waveMusic/src/Player.js"],"names":["React","useRef","useState","useEffect","FontAwesomeIcon","faPlay","faPause","faAngleLeft","faAngleRight","Player","currentSong","isPlaying","setIsPlaying","setAudio","audio","songs","setSongs","setCurrentSong","audioRef","fuck","newSongs","map","songCheck","id","active","songEndHandler","songIndex","findIndex","song","length","current","play","skipTrackHandler","direction","playSongHandler","pause","timeUpdateHandler","e","target","currentTime","duration","roundedCurrent","Math","round","roundedDuration","animtaion","setSongInfo","animationPercentage","getTime","time","floor","slice","dragInputHandler","value","songInfo","track","transform","background","color"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SACEC,MADF,EAEEC,OAFF,EAGEC,WAHF,EAIEC,YAJF,QAKO,mCALP,C,CAMA;;;;AAEA,SAASC,MAAT,CAAgB;AACdC,EAAAA,WADc;AAEdC,EAAAA,SAFc;AAGdC,EAAAA,YAHc;AAIdC,EAAAA,QAJc;AAKdC,EAAAA,KALc;AAMdC,EAAAA,KANc;AAOdC,EAAAA,QAPc;AAQdC,EAAAA;AARc,CAAhB,EASG;AAAA;;AACD;AACA,QAAMC,QAAQ,GAAGjB,MAAM,CAAC,IAAD,CAAvB;AACA,MAAIkB,IAAI,GAAGT,WAAX,CAHC,CAKD;;AACAP,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMiB,QAAQ,GAAGL,KAAK,CAACM,GAAN,CAAWC,SAAD,IAAe;AACxC,UAAIA,SAAS,CAACC,EAAV,KAAiBb,WAAW,CAACa,EAAjC,EAAqC;AACnC,eAAO,EAAE,GAAGD,SAAL;AAAgBE,UAAAA,MAAM,EAAE;AAAxB,SAAP,CADmC,CACI;AACxC,OAFD,MAEO;AACL,eAAO,EAAE,GAAGF,SAAL;AAAgBE,UAAAA,MAAM,EAAE;AAAxB,SAAP;AACD;AACF,KANgB,CAAjB,CAFc,CASd;;AACAR,IAAAA,QAAQ,CAACI,QAAD,CAAR;AACD,GAXQ,EAWN,CAACD,IAAD,CAXM,CAAT,CANC,CAmBD;;AACA,QAAMM,cAAc,GAAG,YAAY;AACjC,UAAMC,SAAS,GAAGX,KAAK,CAACY,SAAN,CAAiBC,IAAD,IAAUA,IAAI,CAACL,EAAL,KAAYb,WAAW,CAACa,EAAlD,CAAlB;AACA,UAAMN,cAAc,CAACF,KAAK,CAAC,CAACW,SAAS,GAAG,CAAb,IAAkBX,KAAK,CAACc,MAAzB,CAAN,CAApB;AACA,QAAIlB,SAAJ,EAAeO,QAAQ,CAACY,OAAT,CAAiBC,IAAjB;AAChB,GAJD;;AAMA,QAAMC,gBAAgB,GAAG,MAAOC,SAAP,IAAqB;AAC5C,UAAMP,SAAS,GAAGX,KAAK,CAACY,SAAN,CAAiBC,IAAD,IAAUA,IAAI,CAACL,EAAL,KAAYb,WAAW,CAACa,EAAlD,CAAlB;;AACA,QAAIU,SAAS,KAAK,cAAlB,EAAkC;AAChC,YAAMhB,cAAc,CAACF,KAAK,CAAC,CAACW,SAAS,GAAG,CAAb,IAAkBX,KAAK,CAACc,MAAzB,CAAN,CAApB;AACD;;AACD,QAAII,SAAS,KAAK,WAAlB,EAA+B;AAC7B,UAAIP,SAAS,KAAK,CAAlB,EAAqB;AACnB,cAAMT,cAAc,CAACF,KAAK,CAACA,KAAK,CAACc,MAAN,GAAe,CAAhB,CAAN,CAApB,CADmB,CAEnB;;AACA,YAAIlB,SAAJ,EAAeO,QAAQ,CAACY,OAAT,CAAiBC,IAAjB;AAEf;AACD;;AACD,YAAMd,cAAc,CAACF,KAAK,CAACW,SAAS,GAAG,CAAb,CAAN,CAApB;AACD,KAd2C,CAe5C;;;AACA,QAAIf,SAAJ,EAAeO,QAAQ,CAACY,OAAT,CAAiBC,IAAjB;AAChB,GAjBD;;AAmBA,QAAMG,eAAe,GAAG,YAAY;AAClC,UAAMrB,QAAQ,CAACK,QAAD,CAAd;;AACA,QAAIP,SAAJ,EAAe;AACb,YAAMO,QAAQ,CAACY,OAAT,CAAiBK,KAAjB,EAAN;AACA,YAAMvB,YAAY,CAAC,CAACD,SAAF,CAAlB;AACD,KAHD,MAGO;AACL,YAAMO,QAAQ,CAACY,OAAT,CAAiBC,IAAjB,EAAN;AACA,YAAMnB,YAAY,CAAC,CAACD,SAAF,CAAlB;AACD;AACF,GATD;;AAWA,QAAMyB,iBAAiB,GAAG,MAAOC,CAAP,IAAa;AACrC,UAAMP,OAAO,GAAGO,CAAC,CAACC,MAAF,CAASC,WAAzB;AACA,UAAMC,QAAQ,GAAGH,CAAC,CAACC,MAAF,CAASE,QAA1B;AACA,UAAMC,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWb,OAAX,CAAvB;AACA,UAAMc,eAAe,GAAGF,IAAI,CAACC,KAAL,CAAWH,QAAX,CAAxB;AACA,UAAMK,SAAS,GAAGH,IAAI,CAACC,KAAL,CAAYF,cAAc,GAAGG,eAAlB,GAAqC,GAAhD,CAAlB;AACA,UAAME,WAAW,CAAC;AAChBP,MAAAA,WAAW,EAAET,OADG;AAEhBU,MAAAA,QAAQ,EAAEA,QAFM;AAGhBO,MAAAA,mBAAmB,EAAEF;AAHL,KAAD,CAAjB;AAKD,GAXD;;AAaA,QAAMG,OAAO,GAAIC,IAAD,IAAU;AACxB,WACEP,IAAI,CAACQ,KAAL,CAAWD,IAAI,GAAG,EAAlB,IAAwB,GAAxB,GAA8B,CAAC,MAAMP,IAAI,CAACQ,KAAL,CAAWD,IAAI,GAAG,EAAlB,CAAP,EAA8BE,KAA9B,CAAoC,CAAC,CAArC,CADhC;AAGD,GAJD;;AAMA,QAAMC,gBAAgB,GAAIf,CAAD,IAAO;AAC9BnB,IAAAA,QAAQ,CAACY,OAAT,CAAiBS,WAAjB,GAA+BF,CAAC,CAACC,MAAF,CAASe,KAAxC;AACAP,IAAAA,WAAW,CAAC,EAAE,GAAGQ,QAAL;AAAef,MAAAA,WAAW,EAAEF,CAAC,CAACC,MAAF,CAASe;AAArC,KAAD,CAAX;AACD,GAHD,CA3EC,CAgFD;;;AACA,QAAM,CAACC,QAAD,EAAWR,WAAX,IAA0B5C,QAAQ,CAAC;AACvCqC,IAAAA,WAAW,EAAE,CAD0B;AAEvCC,IAAAA,QAAQ,EAAE,CAF6B;AAGvCO,IAAAA,mBAAmB,EAAE;AAHkB,GAAD,CAAxC;AAMA,QAAMQ,KAAK,GAAG;AACZC,IAAAA,SAAS,EAAG,cAAaF,QAAQ,CAACP,mBAAoB;AAD1C,GAAd;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BACE;AAAA,kBAAIC,OAAO,CAACM,QAAQ,CAACf,WAAV;AAAX;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,SAAS,EAAC,OADZ;AAEE,QAAA,KAAK,EAAE;AACLkB,UAAAA,UAAU,EAAG,6BAA4B/C,WAAW,CAACgD,KAAZ,CAAkB,CAAlB,CAAqB,KAAIhD,WAAW,CAACgD,KAAZ,CAAkB,CAAlB,CAAqB;AADlF,SAFT;AAAA,gCAME;AACE,UAAA,GAAG,EAAE,CADP;AAEE,UAAA,GAAG,EAAEJ,QAAQ,CAACd,QAAT,IAAqB,CAF5B;AAGE,UAAA,KAAK,EAAEc,QAAQ,CAACf,WAHlB;AAIE,UAAA,IAAI,EAAC,OAJP;AAKE,UAAA,QAAQ,EAAEa;AALZ;AAAA;AAAA;AAAA;AAAA,gBANF,eAaE;AAAK,UAAA,SAAS,EAAC,eAAf;AAA+B,UAAA,KAAK,EAAEG;AAAtC;AAAA;AAAA;AAAA;AAAA,gBAbF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAiBE;AAAA,kBAAID,QAAQ,CAACd,QAAT,GAAoBQ,OAAO,CAACM,QAAQ,CAACd,QAAV,CAA3B,GAAiD;AAArD;AAAA;AAAA;AAAA;AAAA,cAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAqBE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BACE,QAAC,eAAD;AACE,QAAA,SAAS,EAAC,WADZ;AAEE,QAAA,IAAI,EAAEjC,WAFR;AAGE,QAAA,IAAI,EAAC,IAHP;AAIE,QAAA,OAAO,EAAE,MAAMyB,gBAAgB,CAAC,WAAD;AAJjC;AAAA;AAAA;AAAA;AAAA,cADF,eAOE,QAAC,eAAD;AACE,QAAA,SAAS,EAAC,MADZ;AAEE,QAAA,IAAI,EAAErB,SAAS,GAAGL,OAAH,GAAaD,MAF9B;AAGE,QAAA,IAAI,EAAC,IAHP;AAIE,QAAA,OAAO,EAAE6B;AAJX;AAAA;AAAA;AAAA;AAAA,cAPF,eAaE,QAAC,eAAD;AACE,QAAA,SAAS,EAAC,cADZ;AAEE,QAAA,IAAI,EAAE1B,YAFR;AAGE,QAAA,IAAI,EAAC,IAHP;AAIE,QAAA,OAAO,EAAE,MAAMwB,gBAAgB,CAAC,cAAD;AAJjC;AAAA;AAAA;AAAA;AAAA,cAbF;AAAA;AAAA;AAAA;AAAA;AAAA,YArBF,eAyCE;AACE,MAAA,GAAG,EAAEd,QADP;AAEE,MAAA,GAAG,EAAER,WAAW,CAACI,KAFnB;AAGE,MAAA,YAAY,EAAEsB,iBAHhB;AAIE,MAAA,gBAAgB,EAAEA,iBAJpB;AAKE,MAAA,OAAO,EAAEX;AALX;AAAA;AAAA;AAAA;AAAA,YAzCF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoDD;;GAxJQhB,M;;KAAAA,M;AA0JT,eAAeA,MAAf","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faPlay,\n  faPause,\n  faAngleLeft,\n  faAngleRight,\n} from \"@fortawesome/free-solid-svg-icons\";\n// import {playAudio} from './util'\n\nfunction Player({\n  currentSong,\n  isPlaying,\n  setIsPlaying,\n  setAudio,\n  audio,\n  songs,\n  setSongs,\n  setCurrentSong,\n}) {\n  //Ref\n  const audioRef = useRef(null);\n  var fuck = currentSong;\n\n  //useEffect\n  useEffect(() => {\n    //Change Active\n    const newSongs = songs.map((songCheck) => {\n      if (songCheck.id === currentSong.id) {\n        return { ...songCheck, active: true }; //! I think that spreaded object and modify new value\n      } else {\n        return { ...songCheck, active: false };\n      }\n    });\n    //? Notice map return a new Array\n    setSongs(newSongs);\n  }, [fuck]);\n\n  //Events Handler\n  const songEndHandler = async () => {\n    const songIndex = songs.findIndex((song) => song.id === currentSong.id);\n    await setCurrentSong(songs[(songIndex + 1) % songs.length]);\n    if (isPlaying) audioRef.current.play();\n  };\n\n  const skipTrackHandler = async (direction) => {\n    const songIndex = songs.findIndex((song) => song.id === currentSong.id);\n    if (direction === \"skip-forward\") {\n      await setCurrentSong(songs[(songIndex + 1) % songs.length]);\n    }\n    if (direction === \"skip-back\") {\n      if (songIndex === 0) {\n        await setCurrentSong(songs[songs.length - 1]);\n        // playAudio(isPlaying, audio); //* this for because of returning, won't work continue function\n        if (isPlaying) audioRef.current.play();\n\n        return;\n      }\n      await setCurrentSong(songs[songIndex - 1]);\n    }\n    // playAudio(isPlaying, audio);\n    if (isPlaying) audioRef.current.play();\n  };\n\n  const playSongHandler = async () => {\n    await setAudio(audioRef);\n    if (isPlaying) {\n      await audioRef.current.pause();\n      await setIsPlaying(!isPlaying);\n    } else {\n      await audioRef.current.play();\n      await setIsPlaying(!isPlaying);\n    }\n  };\n\n  const timeUpdateHandler = async (e) => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const animtaion = Math.round((roundedCurrent / roundedDuration) * 100);\n    await setSongInfo({\n      currentTime: current,\n      duration: duration,\n      animationPercentage: animtaion,\n    });\n  };\n\n  const getTime = (time) => {\n    return (\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\n    );\n  };\n\n  const dragInputHandler = (e) => {\n    audioRef.current.currentTime = e.target.value;\n    setSongInfo({ ...songInfo, currentTime: e.target.value });\n  };\n\n  //Song Info\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0,\n  });\n\n  const track = {\n    transform: `translateX(${songInfo.animationPercentage}%)`,\n  };\n\n  return (\n    <div className=\"player\">\n      <div className=\"time-control\">\n        <p>{getTime(songInfo.currentTime)}</p>\n        <div\n          className=\"track\"\n          style={{\n            background: `linear-gradient(to right, ${currentSong.color[0]}, ${currentSong.color[1]})`,\n          }}\n        >\n          <input\n            min={0}\n            max={songInfo.duration || 0}\n            value={songInfo.currentTime}\n            type=\"range\"\n            onChange={dragInputHandler}\n          ></input>\n          <div className=\"animate-track\" style={track}></div>\n        </div>\n        <p>{songInfo.duration ? getTime(songInfo.duration) : \"0:00\"}</p>\n        {/* In a miliSecond, p tag is NaN because before get songInfo.duration. After that, number appears */}\n      </div>\n      <div className=\"play-control\">\n        <FontAwesomeIcon\n          className=\"skip-back\"\n          icon={faAngleLeft}\n          size=\"2x\"\n          onClick={() => skipTrackHandler(\"skip-back\")}\n        />\n        <FontAwesomeIcon\n          className=\"play\"\n          icon={isPlaying ? faPause : faPlay}\n          size=\"2x\"\n          onClick={playSongHandler}\n        />\n        <FontAwesomeIcon\n          className=\"skip-forward\"\n          icon={faAngleRight}\n          size=\"2x\"\n          onClick={() => skipTrackHandler(\"skip-forward\")}\n        />\n      </div>\n      <audio\n        ref={audioRef}\n        src={currentSong.audio}\n        onTimeUpdate={timeUpdateHandler}\n        onLoadedMetadata={timeUpdateHandler}\n        onEnded={songEndHandler}\n      ></audio>\n      {/* onLoadedMetadata is when page is refresh or load, get data from the element  */}\n    </div>\n  );\n}\n\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}