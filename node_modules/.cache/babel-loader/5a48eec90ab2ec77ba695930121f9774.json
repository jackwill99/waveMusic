{"ast":null,"code":"var _jsxFileName = \"/Users/wailwinphyo/root/projects/React/waveMusic/src/Player.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faPause, faAngleLeft, faAngleRight } from \"@fortawesome/free-solid-svg-icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Player({\n  currentSong,\n  isPlaying,\n  setIsPlaying,\n  setAudio,\n  audio,\n  songs,\n  setCurrentSong\n}) {\n  _s();\n\n  //Ref\n  const audioRef = useRef(null); //Events Handler\n\n  const skipTrackHandler = direction => {\n    const songIndex = songs.findIndex(song => song.id === currentSong.id);\n\n    if (direction === \"skip-forward\") {\n      setCurrentSong();\n    }\n\n    if (direction === \"skip-back\") {\n      console.log(\"skip-back\");\n    }\n  };\n\n  const playSongHandler = () => {\n    setAudio(audioRef);\n\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  const timeUpdateHandler = e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    setSongInfo({\n      currentTime: current,\n      duration: duration\n    });\n  };\n\n  const getTime = time => {\n    return Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2);\n  };\n\n  const dragInputHandler = e => {\n    audioRef.current.currentTime = e.target.value;\n    setSongInfo({ ...songInfo,\n      currentTime: e.target.value\n    });\n  }; //Song Info\n\n\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: getTime(songInfo.currentTime)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        min: 0,\n        max: songInfo.duration || 0,\n        value: songInfo.currentTime,\n        type: \"range\",\n        onChange: dragInputHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: getTime(songInfo.duration)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play-control\",\n      children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        className: \"skip-back\",\n        icon: faAngleLeft,\n        size: \"2x\",\n        onClick: () => kipTrackHandler(\"skip-back\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        className: \"play\",\n        icon: isPlaying ? faPause : faPlay,\n        size: \"2x\",\n        onClick: playSongHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        className: \"skip-forward\",\n        icon: faAngleRight,\n        size: \"2x\",\n        onClick: () => kipTrackHandler(\"skip-forward\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      src: currentSong.audio,\n      onTimeUpdate: timeUpdateHandler,\n      onLoadedMetadata: timeUpdateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Player, \"KEZIH2+2kfavtX2nJ+bHWjds3mA=\");\n\n_c = Player;\nexport default Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["/Users/wailwinphyo/root/projects/React/waveMusic/src/Player.js"],"names":["React","useRef","useState","FontAwesomeIcon","faPlay","faPause","faAngleLeft","faAngleRight","Player","currentSong","isPlaying","setIsPlaying","setAudio","audio","songs","setCurrentSong","audioRef","skipTrackHandler","direction","songIndex","findIndex","song","id","console","log","playSongHandler","current","pause","play","timeUpdateHandler","e","target","currentTime","duration","setSongInfo","getTime","time","Math","floor","slice","dragInputHandler","value","songInfo","kipTrackHandler"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faPlay,\n  faPause,\n  faAngleLeft,\n  faAngleRight,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nfunction Player({\n  currentSong,\n  isPlaying,\n  setIsPlaying,\n  setAudio,\n  audio,\n  songs,\n  setCurrentSong,\n}) {\n  //Ref\n  const audioRef = useRef(null);\n\n  //Events Handler\n  const skipTrackHandler = (direction) => {\n    const songIndex = songs.findIndex((song) => song.id === currentSong.id);\n    if (direction === \"skip-forward\") {\n      setCurrentSong();\n    }\n    if (direction === \"skip-back\") {\n      console.log(\"skip-back\");\n    }\n  };\n\n  const playSongHandler = () => {\n    setAudio(audioRef);\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  const timeUpdateHandler = (e) => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    setSongInfo({ currentTime: current, duration: duration });\n  };\n\n  const getTime = (time) => {\n    return (\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\n    );\n  };\n\n  const dragInputHandler = (e) => {\n    audioRef.current.currentTime = e.target.value;\n    setSongInfo({ ...songInfo, currentTime: e.target.value });\n  };\n\n  //Song Info\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n  });\n\n  return (\n    <div className=\"player\">\n      <div className=\"time-control\">\n        <p>{getTime(songInfo.currentTime)}</p>\n        <input\n          min={0}\n          max={songInfo.duration || 0}\n          value={songInfo.currentTime}\n          type=\"range\"\n          onChange={dragInputHandler}\n        ></input>\n        <p>{getTime(songInfo.duration)}</p>\n      </div>\n      <div className=\"play-control\">\n        <FontAwesomeIcon\n          className=\"skip-back\"\n          icon={faAngleLeft}\n          size=\"2x\"\n          onClick={() => kipTrackHandler(\"skip-back\")}\n        />\n        <FontAwesomeIcon\n          className=\"play\"\n          icon={isPlaying ? faPause : faPlay}\n          size=\"2x\"\n          onClick={playSongHandler}\n        />\n        <FontAwesomeIcon\n          className=\"skip-forward\"\n          icon={faAngleRight}\n          size=\"2x\"\n          onClick={() => kipTrackHandler(\"skip-forward\")}\n        />\n      </div>\n      <audio\n        ref={audioRef}\n        src={currentSong.audio}\n        onTimeUpdate={timeUpdateHandler}\n        onLoadedMetadata={timeUpdateHandler}\n      ></audio>\n      {/* onLoadedMetadata is when page is refresh or load, get data from the element  */}\n    </div>\n  );\n}\n\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}