{"ast":null,"code":"var _jsxFileName = \"/Users/wailwinphyo/root/projects/React/waveMusic/src/LibrarySong.js\";\nimport React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMusic } from \"@fortawesome/free-solid-svg-icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LibrarySong = ({\n  song,\n  setCurrentSong,\n  audio,\n  isPlaying,\n  setSongs,\n  songs,\n  id\n}) => {\n  const songSelectHandler = () => {\n    setCurrentSong(song); //Even song select, song can't play automatically. This code is for that -->>\n\n    if (isPlaying) {\n      //console.log(audio.current.play())\n      const playPromise = audio.current.play();\n      console.log(audio.current);\n\n      if (playPromise !== undefined) {\n        playPromise.then(() => {\n          audio.current.play();\n        });\n      }\n    } //Change Active\n\n\n    const newSongs = songs.map(songCheck => {\n      if (songCheck.id === song.id) {\n        return { ...songCheck,\n          active: true\n        }; //! I think that spreaded object and modify new value\n      } else {\n        return { ...songCheck,\n          active: false\n        };\n      }\n    }); //? Notice map return a new Array\n\n    setSongs(newSongs);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `library-song ${song.active ? \"selected\" : \"\"}`,\n    onClick: songSelectHandler,\n    children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faMusic,\n      size: \"2x\",\n      className: \"music-icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Title : \", song.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: [\"Artist : \", song.artist]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_c = LibrarySong;\nexport default LibrarySong;\n\nvar _c;\n\n$RefreshReg$(_c, \"LibrarySong\");","map":{"version":3,"sources":["/Users/wailwinphyo/root/projects/React/waveMusic/src/LibrarySong.js"],"names":["React","FontAwesomeIcon","faMusic","LibrarySong","song","setCurrentSong","audio","isPlaying","setSongs","songs","id","songSelectHandler","playPromise","current","play","console","log","undefined","then","newSongs","map","songCheck","active","name","artist"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,OAAT,QAAwB,mCAAxB;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AACnBC,EAAAA,IADmB;AAEnBC,EAAAA,cAFmB;AAGnBC,EAAAA,KAHmB;AAInBC,EAAAA,SAJmB;AAKnBC,EAAAA,QALmB;AAMnBC,EAAAA,KANmB;AAOnBC,EAAAA;AAPmB,CAAD,KAQd;AACJ,QAAMC,iBAAiB,GAAG,MAAM;AAC9BN,IAAAA,cAAc,CAACD,IAAD,CAAd,CAD8B,CAG9B;;AACA,QAAIG,SAAJ,EAAe;AACb;AACA,YAAMK,WAAW,GAAGN,KAAK,CAACO,OAAN,CAAcC,IAAd,EAApB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYV,KAAK,CAACO,OAAlB;;AACA,UAAID,WAAW,KAAKK,SAApB,EAA+B;AAC7BL,QAAAA,WAAW,CAACM,IAAZ,CAAiB,MAAM;AACrBZ,UAAAA,KAAK,CAACO,OAAN,CAAcC,IAAd;AACD,SAFD;AAGD;AACF,KAb6B,CAe9B;;;AACA,UAAMK,QAAQ,GAAGV,KAAK,CAACW,GAAN,CAAWC,SAAD,IAAe;AACxC,UAAIA,SAAS,CAACX,EAAV,KAAiBN,IAAI,CAACM,EAA1B,EAA8B;AAC5B,eAAO,EAAE,GAAGW,SAAL;AAAgBC,UAAAA,MAAM,EAAE;AAAxB,SAAP,CAD4B,CACW;AACxC,OAFD,MAEO;AACL,eAAO,EAAE,GAAGD,SAAL;AAAgBC,UAAAA,MAAM,EAAE;AAAxB,SAAP;AACD;AACF,KANgB,CAAjB,CAhB8B,CAuB9B;;AAEAd,IAAAA,QAAQ,CAACW,QAAD,CAAR;AACD,GA1BD;;AA2BA,sBACE;AACE,IAAA,SAAS,EAAG,gBAAef,IAAI,CAACkB,MAAL,GAAc,UAAd,GAA2B,EAAG,EAD3D;AAEE,IAAA,OAAO,EAAEX,iBAFX;AAAA,4BAIE,QAAC,eAAD;AAAiB,MAAA,IAAI,EAAET,OAAvB;AAAgC,MAAA,IAAI,EAAC,IAArC;AAA0C,MAAA,SAAS,EAAC;AAApD;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAA,+BAAaE,IAAI,CAACmB,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,gCAAcnB,IAAI,CAACoB,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAhDD;;KAAMrB,W;AAkDN,eAAeA,WAAf","sourcesContent":["import React from \"react\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMusic } from \"@fortawesome/free-solid-svg-icons\";\n\nconst LibrarySong = ({\n  song,\n  setCurrentSong,\n  audio,\n  isPlaying,\n  setSongs,\n  songs,\n  id,\n}) => {\n  const songSelectHandler = () => {\n    setCurrentSong(song);\n\n    //Even song select, song can't play automatically. This code is for that -->>\n    if (isPlaying) {\n      //console.log(audio.current.play())\n      const playPromise = audio.current.play();\n      console.log(audio.current);\n      if (playPromise !== undefined) {\n        playPromise.then(() => {\n          audio.current.play();\n        });\n      }\n    }\n\n    //Change Active\n    const newSongs = songs.map((songCheck) => {\n      if (songCheck.id === song.id) {\n        return { ...songCheck, active: true }; //! I think that spreaded object and modify new value\n      } else {\n        return { ...songCheck, active: false };\n      }\n    });\n    //? Notice map return a new Array\n\n    setSongs(newSongs);\n  };\n  return (\n    <div\n      className={`library-song ${song.active ? \"selected\" : \"\"}`}\n      onClick={songSelectHandler}\n    >\n      <FontAwesomeIcon icon={faMusic} size=\"2x\" className=\"music-icon\" />\n      <div className=\"song-info\">\n        <h4>Title : {song.name}</h4>\n        <h5>Artist : {song.artist}</h5>\n      </div>\n    </div>\n  );\n};\n\nexport default LibrarySong;\n"]},"metadata":{},"sourceType":"module"}