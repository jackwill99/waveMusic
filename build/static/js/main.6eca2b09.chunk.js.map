{"version":3,"sources":["Player.js","Song.js","songs/1.mp3","songs/3.mp3","songs/5.mp3","data.js","LibrarySong.js","Library.js","Nav.js","App.js","index.js"],"names":["Player","currentSong","isPlaying","setIsPlaying","setAudio","songs","audio","setSongs","setCurrentSong","audioRef","useRef","activeSongHandler","nextPrev","newSongs","map","songCheck","id","active","songEndHandler","a","songIndex","findIndex","song","length","current","play","skipTrackHandler","direction","playSongHandler","pause","timeUpdateHandler","e","target","currentTime","duration","roundedCurrent","Math","round","roundedDuration","animtaion","setSongInfo","animationPercentage","getTime","time","floor","slice","useState","songInfo","track","transform","className","style","background","color","min","max","value","type","onChange","icon","faAngleLeft","size","onClick","faPause","faPlay","faAngleRight","ref","src","onTimeUpdate","onLoadedMetadata","onEnded","Song","name","artist","chillHop","song1","uuidv4","song3","song5","LibrarySong","songSelectHandler","faMusic","Library","libraryStatus","Nav","setLibraryStatus","App","data","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAsLeA,MA5Kf,YASI,IARFC,EAQC,EARDA,YACAC,EAOC,EAPDA,UACAC,EAMC,EANDA,aACAC,EAKC,EALDA,SAEAC,GAGC,EAJDC,MAIC,EAHDD,OACAE,EAEC,EAFDA,SACAC,EACC,EADDA,eAGMC,EAAWC,iBAAO,MAmBlBC,EAAoB,SAACC,GACzB,IAAMC,EAAWR,EAAMS,KAAI,SAACC,GAC1B,OAAIA,EAAUC,KAAOJ,EAASI,GACrB,2BAAKD,GAAZ,IAAuBE,QAAQ,IAExB,2BAAKF,GAAZ,IAAuBE,QAAQ,OAInCV,EAASM,IAGLK,EAAc,uCAAG,4BAAAC,EAAA,6DACfC,EAAYf,EAAMgB,WAAU,SAACC,GAAD,OAAUA,EAAKN,KAAOf,EAAYe,MAD/C,SAEfR,EAAeH,GAAOe,EAAY,GAAKf,EAAMkB,SAF9B,OAGjBrB,GAAWO,EAASe,QAAQC,OAHX,2CAAH,qDAMdC,EAAgB,uCAAG,WAAOC,GAAP,eAAAR,EAAA,yDACjBC,EAAYf,EAAMgB,WAAU,SAACC,GAAD,OAAUA,EAAKN,KAAOf,EAAYe,MAClD,iBAAdW,EAFmB,gCAGfnB,EAAeH,GAAOe,EAAY,GAAKf,EAAMkB,SAH9B,OAIrBZ,EAAkBN,GAAOe,EAAY,GAAKf,EAAMkB,SAJ3B,UAML,cAAdI,EANmB,oBAOH,IAAdP,EAPiB,iCAQbZ,EAAeH,EAAMA,EAAMkB,OAAS,IARvB,cASnBZ,EAAkBN,EAAMA,EAAMkB,OAAS,IAGnCrB,GAAWO,EAASe,QAAQC,OAZb,4CAgBfjB,EAAeH,EAAMe,EAAY,IAhBlB,QAiBrBT,EAAkBN,EAAMA,EAAMkB,OAAS,IAjBlB,QAoBnBrB,GAAWO,EAASe,QAAQC,OApBT,4CAAH,sDAuBhBG,EAAe,uCAAG,sBAAAT,EAAA,sEAChBf,EAASK,GADO,WAElBP,EAFkB,gCAGdO,EAASe,QAAQK,QAHH,uBAId1B,GAAcD,GAJA,+CAMdO,EAASe,QAAQC,OANH,yBAOdtB,GAAcD,GAPA,4CAAH,qDAWf4B,EAAiB,uCAAG,WAAOC,GAAP,uBAAAZ,EAAA,6DAClBK,EAAUO,EAAEC,OAAOC,YACnBC,EAAWH,EAAEC,OAAOE,SACpBC,EAAiBC,KAAKC,MAAMb,GAC5Bc,EAAkBF,KAAKC,MAAMH,GAC7BK,EAAYH,KAAKC,MAAOF,EAAiBG,EAAmB,KAL1C,SAMlBE,EAAY,CAChBP,YAAaT,EACbU,SAAUA,EACVO,oBAAqBF,IATC,2CAAH,sDAajBG,EAAU,SAACC,GACf,OACEP,KAAKQ,MAAMD,EAAO,IAAM,KAAO,IAAMP,KAAKQ,MAAMD,EAAO,KAAKE,OAAO,IAUvE,EAAgCC,mBAAS,CACvCb,YAAa,EACbC,SAAU,EACVO,oBAAqB,IAHvB,mBAAOM,EAAP,KAAiBP,EAAjB,KAMMQ,EAAQ,CACZC,UAAU,cAAD,OAAgBF,EAASN,qBAAuB,EAAhD,OAIX,OACE,sBAAKS,UAAU,SAAf,UACE,sBAAKA,UAAU,eAAf,UACE,4BAAIR,EAAQK,EAASd,eACrB,sBACEiB,UAAU,QACVC,MAAO,CACLC,WAAW,6BAAD,OAA+BnD,EAAYoD,MAAM,GAAjD,aAAwDpD,EAAYoD,MAAM,GAA1E,MAHd,UAME,uBACEC,IAAK,EACLC,IAAKR,EAASb,UAAY,EAC1BsB,MAAOT,EAASd,YAChBwB,KAAK,QACLC,SAhCe,SAAC3B,GACxBtB,EAASe,QAAQS,YAAcF,EAAEC,OAAOwB,MACxChB,EAAY,2BAAKO,GAAN,IAAgBd,YAAaF,EAAEC,OAAOwB,YAgC3C,qBAAKN,UAAU,gBAAgBC,MAAOH,OAExC,4BAAID,EAASb,SAAWQ,EAAQK,EAASb,UAAY,YAGvD,sBAAKgB,UAAU,eAAf,UACE,cAAC,IAAD,CACEA,UAAU,YACVS,KAAMC,IACNC,KAAK,KACLC,QAAS,kBAAMpC,EAAiB,gBAElC,cAAC,IAAD,CACEwB,UAAU,OACVS,KAAMzD,EAAY6D,IAAUC,IAC5BH,KAAK,KACLC,QAASlC,IAEX,cAAC,IAAD,CACEsB,UAAU,eACVS,KAAMM,IACNJ,KAAK,KACLC,QAAS,kBAAMpC,EAAiB,sBAGpC,uBACEwC,IAAKzD,EACL0D,IAAKlE,EAAYK,MACjB8D,aAActC,EACduC,iBAAkBvC,EAClBwC,QAASpD,QCpKFqD,EATF,SAAC,GAAqB,IAAnBtE,EAAkB,EAAlBA,YACd,OACE,sBAAKiD,UAAU,iBAAf,UACE,6BAAKjD,EAAYuE,OACjB,6BAAKvE,EAAYwE,a,QCNR,MAA0B,8BCA1B,MAA0B,8BCA1B,MAA0B,8BCkC1BC,MA7Bf,WACE,MAAO,CACL,CACEF,KAAM,YACNC,OAAQ,cACRnE,MAAOqE,EACPtB,MAAO,CAAC,UAAW,WACnBrC,GAAI4D,cACJ3D,QAAQ,GAEV,CACEuD,KAAM,mBACNC,OAAQ,0BACRnE,MAAOuE,EACPxB,MAAO,CAAC,UAAW,WACnBrC,GAAI4D,cACJ3D,QAAQ,GAEV,CACEuD,KAAM,aACNC,OAAQ,gBACRnE,MAAOwE,EACPzB,MAAO,CAAC,UAAW,WACnBrC,GAAI4D,cACJ3D,QAAQ,KCkBC8D,EAzCK,SAAC,GAOd,IANLzD,EAMI,EANJA,KACAd,EAKI,EALJA,eACAF,EAII,EAJJA,MACAJ,EAGI,EAHJA,UACAK,EAEI,EAFJA,SACAF,EACI,EADJA,MAEM2E,EAAiB,uCAAG,4BAAA7D,EAAA,sEAClBX,EAAec,GADG,OAKpBpB,GAAWI,EAAMkB,QAAQC,OAGvBZ,EAAWR,EAAMS,KAAI,SAACC,GAC1B,OAAIA,EAAUC,KAAOM,EAAKN,GACjB,2BAAKD,GAAZ,IAAuBE,QAAQ,IAExB,2BAAKF,GAAZ,IAAuBE,QAAQ,OAKnCV,EAASM,GAjBe,2CAAH,qDAmBvB,OACE,sBACEqC,UAAS,uBAAkB5B,EAAKL,OAAS,WAAa,IACtD6C,QAASkB,EAFX,UAIE,cAAC,IAAD,CAAiBrB,KAAMsB,IAASpB,KAAK,KAAKX,UAAU,eACpD,sBAAKA,UAAU,YAAf,UACE,0CAAa5B,EAAKkD,QAClB,2CAAclD,EAAKmD,iBCTZS,EA7BC,SAAC,GAQV,IAPL7E,EAOI,EAPJA,MACAG,EAMI,EANJA,eACAF,EAKI,EALJA,MACAJ,EAII,EAJJA,UACAK,EAGI,EAHJA,SAEA4E,GACI,EAFJlF,YAEI,EADJkF,eAEA,OACE,sBAAKjC,UAAS,kBAAaiC,EAAgB,iBAAmB,IAA9D,UACE,oBAAIjC,UAAU,cAAd,qBACA,qBAAKA,UAAU,gBAAf,SACG7C,EAAMS,KAAI,SAACQ,GAAD,OACT,cAAC,EAAD,CACEjB,MAAOA,EACPiB,KAAMA,EACNf,SAAUA,EAEVC,eAAgBA,EAChBF,MAAOA,EACPJ,UAAWA,GAHNoB,EAAKN,aCDPoE,EAhBH,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,iBAAkBF,EAAoB,EAApBA,cAC/B,OACE,sBAAKjC,UAAU,MAAf,UACE,uCACA,qBACEA,UAAU,iBACVY,QAAS,kBAAMuB,GAAkBF,IAFnC,SAIE,6CAEE,cAAC,IAAD,CAAiBxB,KAAMsB,eC8BlBK,MApCf,WAEE,MAA0BxC,mBAASyC,KAAnC,mBAAOlF,EAAP,KAAcE,EAAd,KACA,EAAsCuC,mBAASzC,EAAM,IAArD,mBAAOJ,EAAP,KAAoBO,EAApB,KACA,EAAkCsC,oBAAS,GAA3C,mBAAO5C,EAAP,KAAkBC,EAAlB,KACA,EAA0B2C,mBAAS,IAAnC,mBAAOxC,EAAP,KAAcF,EAAd,KAGA,EAA0C0C,oBAAS,GAAnD,mBAAOqC,EAAP,KAAsBE,EAAtB,KAEA,OACE,sBAAKnC,UAAS,cAASiC,EAAgB,sBAAwB,IAA/D,UACE,cAAC,EAAD,CAAKA,cAAeA,EAAeE,iBAAkBA,IACrD,cAAC,EAAD,CAAMpF,YAAaA,IACnB,cAAC,EAAD,CACEA,YAAaA,EACbC,UAAWA,EACXC,aAAcA,EACdG,MAAOA,EACPF,SAAUA,EACVC,MAAOA,EACPE,SAAUA,EACVC,eAAgBA,IAElB,cAAC,EAAD,CACEH,MAAOA,EACPE,SAAUA,EACVC,eAAgBA,EAChBF,MAAOA,EACPJ,UAAWA,EACXiF,cAAeA,QClCvBK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6eca2b09.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faPlay,\n  faPause,\n  faAngleLeft,\n  faAngleRight,\n} from \"@fortawesome/free-solid-svg-icons\";\n// import {playAudio} from './util'\n\nfunction Player({\n  currentSong,\n  isPlaying,\n  setIsPlaying,\n  setAudio,\n  audio,\n  songs,\n  setSongs,\n  setCurrentSong,\n}) {\n  //Ref\n  const audioRef = useRef(null);\n\n  // //*useEffect\n  // useEffect(() => {\n  //   //*Change Active\n  //   const newSongs = songs.map((songCheck) => {\n  //     if (songCheck.id === currentSong.id) {\n  //       return { ...songCheck, active: true }; //! I think that spreaded object and modify new value\n  //     } else {\n  //       return { ...songCheck, active: false };\n  //     }\n  //   });\n  //   //? Notice map return a new Array\n  //   setSongs(newSongs);\n  // }, [currentSong]);\n\n  //Events Handler\n\n  //Replace UseEffect\n  const activeSongHandler = (nextPrev) => {\n    const newSongs = songs.map((songCheck) => {\n      if (songCheck.id === nextPrev.id) {\n        return { ...songCheck, active: true }; //! I think that spreaded object and modify new value\n      } else {\n        return { ...songCheck, active: false };\n      }\n    });\n    //? Notice map return a new Array\n    setSongs(newSongs);\n  };\n\n  const songEndHandler = async () => {\n    const songIndex = songs.findIndex((song) => song.id === currentSong.id);\n    await setCurrentSong(songs[(songIndex + 1) % songs.length]);\n    if (isPlaying) audioRef.current.play();\n  };\n\n  const skipTrackHandler = async (direction) => {\n    const songIndex = songs.findIndex((song) => song.id === currentSong.id);\n    if (direction === \"skip-forward\") {\n      await setCurrentSong(songs[(songIndex + 1) % songs.length]);\n      activeSongHandler(songs[(songIndex + 1) % songs.length]);\n    }\n    if (direction === \"skip-back\") {\n      if (songIndex === 0) {\n        await setCurrentSong(songs[songs.length - 1]);\n        activeSongHandler(songs[songs.length - 1]);\n\n        // playAudio(isPlaying, audio); //* this for because of returning, won't work continue function\n        if (isPlaying) audioRef.current.play();\n\n        return;\n      }\n      await setCurrentSong(songs[songIndex - 1]);\n      activeSongHandler(songs[songs.length - 1]);\n    }\n    // playAudio(isPlaying, audio);\n    if (isPlaying) audioRef.current.play();\n  };\n\n  const playSongHandler = async () => {\n    await setAudio(audioRef);\n    if (isPlaying) {\n      await audioRef.current.pause();\n      await setIsPlaying(!isPlaying);\n    } else {\n      await audioRef.current.play();\n      await setIsPlaying(!isPlaying);\n    }\n  };\n\n  const timeUpdateHandler = async (e) => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const animtaion = Math.round((roundedCurrent / roundedDuration) * 100);\n    await setSongInfo({\n      currentTime: current,\n      duration: duration,\n      animationPercentage: animtaion,\n    });\n  };\n\n  const getTime = (time) => {\n    return (\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\n    );\n  };\n\n  const dragInputHandler = (e) => {\n    audioRef.current.currentTime = e.target.value;\n    setSongInfo({ ...songInfo, currentTime: e.target.value });\n  };\n\n  //Song Info\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0,\n  });\n\n  const track = {\n    transform: `translateX(${songInfo.animationPercentage || 0}%)`,\n    /* In a miliSecond, songInfo.animationPercentage is NaN because before get songInfo. After that, number appears */\n  };\n\n  return (\n    <div className=\"player\">\n      <div className=\"time-control\">\n        <p>{getTime(songInfo.currentTime)}</p>\n        <div\n          className=\"track\"\n          style={{\n            background: `linear-gradient(to right, ${currentSong.color[0]}, ${currentSong.color[1]})`,\n          }}\n        >\n          <input\n            min={0}\n            max={songInfo.duration || 0}\n            value={songInfo.currentTime}\n            type=\"range\"\n            onChange={dragInputHandler}\n          ></input>\n          <div className=\"animate-track\" style={track}></div>\n        </div>\n        <p>{songInfo.duration ? getTime(songInfo.duration) : \"0:00\"}</p>\n        {/* In a miliSecond, p tag is NaN because before get songInfo.duration. After that, number appears */}\n      </div>\n      <div className=\"play-control\">\n        <FontAwesomeIcon\n          className=\"skip-back\"\n          icon={faAngleLeft}\n          size=\"2x\"\n          onClick={() => skipTrackHandler(\"skip-back\")}\n        />\n        <FontAwesomeIcon\n          className=\"play\"\n          icon={isPlaying ? faPause : faPlay}\n          size=\"2x\"\n          onClick={playSongHandler}\n        />\n        <FontAwesomeIcon\n          className=\"skip-forward\"\n          icon={faAngleRight}\n          size=\"2x\"\n          onClick={() => skipTrackHandler(\"skip-forward\")}\n        />\n      </div>\n      <audio\n        ref={audioRef}\n        src={currentSong.audio}\n        onTimeUpdate={timeUpdateHandler}\n        onLoadedMetadata={timeUpdateHandler}\n        onEnded={songEndHandler}\n      ></audio>\n      {/* onLoadedMetadata is when page is refresh or load, get data from the element  */}\n    </div>\n  );\n}\n\nexport default Player;\n","import React from \"react\";\n\nconst Song = ({ currentSong }) => {\n  return (\n    <div className=\"song-container\">\n      <h1>{currentSong.name}</h1>\n      <h1>{currentSong.artist}</h1>\n    </div>\n  );\n};\n\nexport default Song;\n","export default __webpack_public_path__ + \"static/media/1.3fed8a0a.mp3\";","export default __webpack_public_path__ + \"static/media/3.effd2f56.mp3\";","export default __webpack_public_path__ + \"static/media/5.4780277d.mp3\";","import { v4 as uuidv4 } from \"uuid\";\nimport song1 from './songs/1.mp3';\nimport song3 from './songs/3.mp3';\nimport song5 from './songs/5.mp3';\n\nfunction chillHop() {\n  return [\n    {\n      name: \"Ma Way Bu\",\n      artist: \"Hlawn Paing\",\n      audio: song1,\n      color: [\"#205950\", \"#2ab3bf\"],\n      id: uuidv4(),\n      active: true,\n    },\n    {\n      name: \"Lay Htal Ka Eain\",\n      artist: \"Bunny Phyo, Amara Phone\",\n      audio: song3,\n      color: [\"#CD607D\", \"#c94043\"],\n      id: uuidv4(),\n      active: false,\n    },\n    {\n      name: \"Chit Nay P\",\n      artist: \"Oak Soe Khant\",\n      audio: song5,\n      color: [\"#BA4A46\", \"#FDF0DD\"],\n      id: uuidv4(),\n      active: false,\n    },\n  ];\n}\n\nexport default chillHop;\n","import React from \"react\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMusic } from \"@fortawesome/free-solid-svg-icons\";\n// import { playAudio } from \"./util\";\n\nconst LibrarySong = ({\n  song,\n  setCurrentSong,\n  audio,\n  isPlaying,\n  setSongs,\n  songs,\n}) => {\n  const songSelectHandler = async () => {\n    await setCurrentSong(song);\n\n    //Even song select, song can't play automatically. This code is for that -->>\n    // playAudio(isPlaying, audio);\n    if (isPlaying) audio.current.play();\n\n    //Change Active\n    const newSongs = songs.map((songCheck) => {\n      if (songCheck.id === song.id) {\n        return { ...songCheck, active: true }; //! I think that spreaded object and modify new value\n      } else {\n        return { ...songCheck, active: false };\n      }\n    });\n    //? Notice map return a new Array\n\n    setSongs(newSongs);\n  };\n  return (\n    <div\n      className={`library-song ${song.active ? \"selected\" : \"\"}`}\n      onClick={songSelectHandler}\n    >\n      <FontAwesomeIcon icon={faMusic} size=\"2x\" className=\"music-icon\" />\n      <div className=\"song-info\">\n        <h4>Title : {song.name}</h4>\n        <h5>Artist : {song.artist}</h5>\n      </div>\n    </div>\n  );\n};\n\nexport default LibrarySong;\n","import React from \"react\";\nimport LibrarySong from \"./LibrarySong\";\n\nconst Library = ({\n  songs,\n  setCurrentSong,\n  audio,\n  isPlaying,\n  setSongs,\n  currentSong,\n  libraryStatus,\n}) => {\n  return (\n    <div className={`library ${libraryStatus ? \"active-library\" : \"\"}`}>\n      <h1 className=\"libra-title\">Library</h1>\n      <div className=\"library-songs\">\n        {songs.map((song) => (\n          <LibrarySong\n            songs={songs}\n            song={song}\n            setSongs={setSongs}\n            key={song.id}\n            setCurrentSong={setCurrentSong}\n            audio={audio}\n            isPlaying={isPlaying}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Library;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMusic } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Nav = ({ setLibraryStatus, libraryStatus }) => {\n  return (\n    <div className=\"nav\">\n      <h1>Waves</h1>\n      <div\n        className=\"library-toggle\"\n        onClick={() => setLibraryStatus(!libraryStatus)}\n      >\n        <button>\n          Library\n          <FontAwesomeIcon icon={faMusic} />\n        </button>\n      </div>\n    </div>\n  );\n};\nexport default Nav;\n","import React, { useState } from \"react\";\nimport \"./styles/app.scss\";\nimport Player from \"./Player\";\nimport Song from \"./Song\";\nimport data from \"./data\";\nimport Library from \"./Library\";\nimport Nav from \"./Nav\";\n\nfunction App() {\n  //State\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [audio, setAudio] = useState(\"\"); // audio is refrence to the audio tag only.\n  // When SongLibrary select , change the audio src . So it works this state\n\n  const [libraryStatus, setLibraryStatus] = useState(false);\n\n  return (\n    <div className={`App ${libraryStatus ? \"library-active-move\" : \"\"}`}>\n      <Nav libraryStatus={libraryStatus} setLibraryStatus={setLibraryStatus} />\n      <Song currentSong={currentSong} />\n      <Player\n        currentSong={currentSong}\n        isPlaying={isPlaying}\n        setIsPlaying={setIsPlaying}\n        audio={audio}\n        setAudio={setAudio}\n        songs={songs}\n        setSongs={setSongs}\n        setCurrentSong={setCurrentSong}\n      />\n      <Library\n        songs={songs}\n        setSongs={setSongs}\n        setCurrentSong={setCurrentSong}\n        audio={audio}\n        isPlaying={isPlaying}\n        libraryStatus={libraryStatus}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}